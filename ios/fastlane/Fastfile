default_platform(:ios)

before_all do
  dotenv = Dotenv.load('.env')
end

project   = "Runner.xcodeproj"
workspace = "Runner.xcworkspace"

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    set_build_number()
    archive_appstore()
    add_change_log()
    upload_to_appstore()
  end

  lane :set_build_number do
    UI.header "‚è∞ Setting time as build number"

    build_number = Time.new.strftime('%y%m%d%H%M')

    increment_build_number(build_number:, xcodeproj: project)
  end

  lane :archive_appstore do
    UI.header "‚è∞ Archiving AppStore"
    gym(
      workspace: workspace,
      scheme: "Runner",
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates"
    )
  end

  lane :add_change_log do
    changelog_from_git_commits(
      commits_count: 20,
      pretty: '- %s',
      date_format: 'short',
      match_lightweight_tag: false,
      merge_commit_filtering: 'include_merges'
    )
  end

  lane :upload_to_appstore do
    UI.header "üöÄ Uploading to TestFlight"
    upload_to_testflight(
      api_key: app_store_connect_api_key(
        key_id: ENV['APPSTORE_KEY_ID'], 
        issuer_id: ENV['APPSTORE_ISSUER_ID'], 
        key_filepath: ENV['APPSTORE_KEY_FILEPATH']
      )
    )
  end

  desc "Update whats new to App Store"
  lane :update_whats_new do
    UI.header "üöÄ Update whats new to App Store"

    release_note_message = "- Bug fixes and performance improvements"
    languages_code = ["zh-Hans", "zh-Hant", "fr-FR", "de-DE", "es-ES", "es-MX", "en-AU", "en-GB", "fr-CA", "en-CA", "en-US"]
    release_notes = create_same_release_notes(languages_code, release_note_message)

    UI.header "#{release_notes}"

    deliver(
      api_key: app_store_api_key,
      skip_screenshots: true,
      skip_app_version_update: true,
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false,
      force: true,
      release_notes: release_notes
    )
  end

  private_lane :app_store_api_key do
    app_store_connect_api_key(
      key_id: ENV['APPSTORE_KEY_ID'],
      issuer_id: ENV['APPSTORE_ISSUER_ID'],
      key_filepath: ENV['APPSTORE_KEY_FILEPATH']
    )
  end

  def create_same_release_notes(languages_code, release_note_message)
    release_notes = {}
    
    languages_code.each do |code|
      release_notes[code] = release_note_message
    end
    
    return release_notes
  end

  lane :list_languages do
    UI.header "üîç Fetching available languages for the app"

    key_value = File.read(ENV['APPSTORE_KEY_FILE_NAME'])
    final_api_key_value = key_value.gsub("\\n", "\n")

    api_key_json = {
      "key_id": ENV['APPSTORE_KEY_ID'],
      "issuer_id": ENV['APPSTORE_ISSUER_ID'],
      "key": key_value,
      "in_house": false
    }

    File.write("api_key_json.json", JSON.dump(api_key_json))
  
    # Download metadata
    sh "bundle exec fastlane deliver download_metadata --api_key_path api_key_json.json --app_identifier com.cdmHUB.SwiftComp"
  
    # Read the metadata files to get the list of languages
    metadata_dir = "./metadata"
    languages = Dir.entries(metadata_dir).select { |entry| File.directory? File.join(metadata_dir, entry) and !(entry =='.' || entry == '..') }
  
    UI.header "üîç Available languages"
    # Print the list of languages
    languages.each { |lang| UI.message "Language: #{lang}" }
  
    # Return the list of languages
    languages
  end
end
